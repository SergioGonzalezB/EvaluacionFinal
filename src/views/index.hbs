<div class="p-5">
    <h1 class="display-4">
        MongoDB con bcrypt
    </h1>

    <p>
        Este proyecto final hace uso de lo aprendido durante el semestre, utilizamos los motores de vistas, rutas, CSS,
        formas entre otras funciones.
        Uno de los nuevos agregados es la utilizacion de MongoDB y bcrypt
    </p>

    <br class="espacio"><br class="espacio">

    <div class="text-center pb-3">
        <h2>¿Que es mongoDB?</h2>

        <a target="_blank" href="https://www.mongodb.com/es/what-is-mongodb">
            <img class="logos" src="/images/mongodb.svg" alt="mongoDB">
        </a>
    </div>

    <p>
        MongoDB es una base de datos de documentos que ofrece una gran escalabilidad y flexibilidad, y un modelo de
        consultas e indexación avanzado.
    </p>

    <p>
        MongoDB es una base de datos orientada a documentos. Esto quiere decir que en lugar de guardar los datos en
        registros,
        guarda los datos en documentos. Estos documentos son almacenados en BSON, que es una representación binaria de
        JSON.

        Una de las diferencias más importantes con respecto a las bases de datos relacionales, es que no es necesario
        seguir un
        esquema. Los documentos de una misma colección - concepto similar a una tabla de una base de datos relacional,
        pueden
        tener esquemas diferentes.
    </p>

    <br class="espacio"><br class="espacio">

    <div class="text-center pb-3">
        <h2>¿Que es bcrypt?</h2>
        <a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank">
            <img class="logos2" src="/images/bcrypt.png" alt="bcrypt">
        </a>
    </div>
    <p>
        Bcrypt es una función de hashing de passwords diseñado por Niels Provos y David Maxieres, basado en el cifrado
        de
        Blowfish. Se usa por defecto en sistemas OpenBSD y algunas distribuciones Linux y SUSE. Lleva incorporado un
        valor
        llamado salt, que es un fragmento aleatorio que se usará para generar el hash asociado a la password, y se
        guardará
        junto con ella en la base de datos. Así se evita que dos passwords iguales generen el mismo hash y los problemas
        que
        ello conlleva, por ejemplo, ataque por fuerza bruta a todas las passwords del sistema a la vez. Otro ataque
        relacionado
        es el de Rainbow table (tabla arcoíris), que son tablas de asociaciones entre textos y su hash asociado, para
        evitar su
        cálculo y acelerar la búsqueda de la password. Con el salt, se añade un grado de complejidad que evita que el
        hash
        asociado a una password sea único.
    </p>


</div>